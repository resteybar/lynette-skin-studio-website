{"ast":null,"code":"var _jsxFileName = \"/Users/Gray/Desktop/ /lynette-skin-studio-website/src/Goals/Goals.tsx\";\nimport React from 'react';\nimport './Goals.css';\nimport { styled } from 'styletron-react';\nconst LynettesGoals = [{\n  goalName: 'AFFORDABLE',\n  goalDescription: 'We strive to offer the best prices in the Monterey Bay Area to our customers.',\n  goalButtonText: 'SEE SERVICES'\n}, {\n  goalName: 'FACIAL',\n  goalDescription: 'We offer a unique experience to clients, by providing them beauty and relaxation of Lynetteâ€™s facial treatments.',\n  goalButtonText: 'SCHEDULE NOW'\n}, {\n  goalName: 'CARE',\n  goalDescription: 'We take pride in caring and building trust with our customers in order to provide a rejuvenating experience.',\n  goalButtonText: 'SEE PRODUCTS'\n}];\n\nconst Goals = props => {\n  const checkNames = new Map([['Services', true], ['Contact', true], ['Products', true]]);\n  const linkNames = ['Services', 'Contact', 'Products'];\n\n  const getButtonLinks = () => {\n    let buttonLinks = new Map();\n\n    for (let i = 0; i < props.links.length; i++) {\n      const name = props.links[i].name;\n      if (checkNames.has(name)) buttonLinks.set(name, props.links[i]);\n    }\n\n    return buttonLinks;\n  };\n\n  const renderGoals = () => {\n    var renderedMenu = [];\n    const buttonLinks = getButtonLinks();\n\n    for (let i = 0; i < LynettesGoals.length; i++) {\n      const goalName = LynettesGoals[i].goalName;\n      const goalDescription = LynettesGoals[i].goalDescription;\n      const goalButtonText = LynettesGoals[i].goalButtonText;\n      const link = buttonLinks.get(linkNames[i]);\n\n      if (link) {\n        const path = link.path;\n        const mobileAdj = link.mobileAdjustment;\n        const browserAdj = link.browserAdjustment;\n        renderedMenu.push(React.createElement(Goal, {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(GoalName, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, goalName), React.createElement(GoalDescription, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, goalDescription)), React.createElement(GoalButtonText, {\n          onClick: () => props.scrollToPage(path, mobileAdj, browserAdj),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, goalButtonText)));\n      }\n    }\n\n    return renderedMenu;\n  };\n\n  return React.createElement(GoalsPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(AboutTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"ABOUT\"), React.createElement(GridLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, renderGoals()));\n}; // CSS\n\n\nconst LynetteBrown = '#862e08';\nconst GoalsPage = styled('div', {\n  paddingTop: '40px',\n  marginBottom: '-500px'\n});\nconst AboutTitle = styled('h1', {\n  fontFamily: 'Halant Light',\n  textAlign: 'center',\n  letterSpacing: '13px',\n  fontSize: '40px',\n  color: LynetteBrown,\n  marginTop: '30px',\n  marginBottom: '25px'\n});\nconst Goal = styled('div', {\n  textAlign: 'center',\n  // Organizing title, description, & button\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between'\n});\nconst GoalName = styled('h2', {\n  fontFamily: 'Shree Bold',\n  letterSpacing: '4px',\n  borderBottom: '1px solid ' + LynetteBrown,\n  fontSize: '18pt'\n});\nconst GoalDescription = styled('p', {\n  marginTop: '20px',\n  fontFamily: 'Shree Reg',\n  marginBottom: '25px'\n});\nconst GoalButtonText = styled('button', {\n  // Font Related\n  fontFamily: 'Shree Reg',\n  letterSpacing: '1px',\n  // Colors\n  border: '1px solid ' + LynetteBrown,\n  color: LynetteBrown,\n  backgroundColor: 'transparent',\n  // Centered Menu\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  // Size of box\n  height: '45px',\n  width: '150px'\n});\nconst GridLayout = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr',\n  gridColumnGap: '100px',\n  gridRowGap: '50px',\n  // Center Menu\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  // Ensuring size does not maximize and minimize too much\n  minWidth: '400px',\n  maxWidth: '1200px',\n  // Helps organize Services when website is getting minimized or on Mobile\n  '@media screen and (max-width: 1250px)': {\n    marginLeft: '50px',\n    marginRight: '50px'\n  },\n  '@media screen and (max-width: 900px)': {\n    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n    maxWidth: '700px',\n    minWidth: '200px',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  '@media screen and (max-width: 760px)': {\n    marginLeft: '30px',\n    marginRight: '30px'\n  }\n});\nexport default Goals;","map":{"version":3,"sources":["/Users/Gray/Desktop/ /lynette-skin-studio-website/src/Goals/Goals.tsx"],"names":["React","styled","LynettesGoals","goalName","goalDescription","goalButtonText","Goals","props","checkNames","Map","linkNames","getButtonLinks","buttonLinks","i","links","length","name","has","set","renderGoals","renderedMenu","link","get","path","mobileAdj","mobileAdjustment","browserAdj","browserAdjustment","push","scrollToPage","LynetteBrown","GoalsPage","paddingTop","marginBottom","AboutTitle","fontFamily","textAlign","letterSpacing","fontSize","color","marginTop","Goal","display","flexDirection","justifyContent","GoalName","borderBottom","GoalDescription","GoalButtonText","border","backgroundColor","marginLeft","marginRight","height","width","GridLayout","gridTemplateColumns","gridColumnGap","gridRowGap","minWidth","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Goals.css'\nimport { styled } from 'styletron-react'\n\ntype GoalValues = {\n    goalName: string;\n    goalDescription: string;\n    goalButtonText: string;\n}\n\nconst LynettesGoals: GoalValues[] = [\n    {\n        goalName: 'AFFORDABLE',\n        goalDescription: 'We strive to offer the best prices in the Monterey Bay Area to our customers.',\n        goalButtonText: 'SEE SERVICES'\n    },\n    {\n        goalName: 'FACIAL',\n        goalDescription: 'We offer a unique experience to clients, by providing them beauty and relaxation of Lynetteâ€™s facial treatments.',\n        goalButtonText: 'SCHEDULE NOW'\n    },\n    {\n        goalName: 'CARE',\n        goalDescription: 'We take pride in caring and building trust with our customers in order to provide a rejuvenating experience.',\n        goalButtonText: 'SEE PRODUCTS'\n    }\n]\n\ntype LinkValue = {\n    name: string;\n    path: string;\n    mobileAdjustment: number;\n    browserAdjustment: number;\n}\n\ninterface GoalsProps {\n    links: LinkValue[],\n    scrollToPage(id: string, mobileAdjustment: number, browserAdjustment: number): void\n}\n\nconst Goals: React.FC<GoalsProps> = props => {\n\n    const checkNames: Map<string, boolean> = new Map([\n        ['Services', true],\n        ['Contact', true],\n        ['Products', true],\n    ])\n\n    const linkNames: string[] = [\n        'Services',\n        'Contact',\n        'Products'\n    ]\n\n    const getButtonLinks = (): Map<string, LinkValue> => {\n        let buttonLinks: Map<string, LinkValue> = new Map()\n\n        for (let i = 0; i < props.links.length; i++) {\n            const name: string = props.links[i].name\n\n            if (checkNames.has(name)) \n                buttonLinks.set(name, props.links[i])\n        }\n\n        return buttonLinks\n    }\n\n    const renderGoals = (): JSX.Element[] => {\n        var renderedMenu: JSX.Element[] = []\n\n        const buttonLinks: Map<string, LinkValue> = getButtonLinks()\n\n        for (let i = 0; i < LynettesGoals.length; i++) {\n            const goalName: string = LynettesGoals[i].goalName\n            const goalDescription: string = LynettesGoals[i].goalDescription\n            const goalButtonText: string = LynettesGoals[i].goalButtonText\n\n            const link: LinkValue | undefined = buttonLinks.get(linkNames[i])\n\n            if (link) {\n                const path = link.path\n                const mobileAdj = link.mobileAdjustment\n                const browserAdj = link.browserAdjustment\n\n                renderedMenu.push(\n                    <Goal key={ i }>\n                        <div>\n                            <GoalName>{ goalName }</GoalName>\n                            <GoalDescription>{ goalDescription }</GoalDescription>\n                        </div>\n    \n                        <GoalButtonText\n                            onClick={ () => props.scrollToPage(path, mobileAdj, browserAdj) } \n                        >\n                            { goalButtonText }\n                        </GoalButtonText>\n                    </Goal>\n                )\n            }\n        }\n\n        return renderedMenu\n    }\n\n    return (\n        <GoalsPage>\n            <AboutTitle>ABOUT</AboutTitle>\n            {/* Goals */}\n            <GridLayout>\n                { renderGoals() }\n            </GridLayout>\n        </GoalsPage>\n    )\n}\n\n// CSS\nconst LynetteBrown = '#862e08'\n\nconst GoalsPage = styled('div', {\n    paddingTop: '40px',\n    marginBottom: '-500px',\n})\n\nconst AboutTitle = styled('h1', {\n    fontFamily: 'Halant Light',\n    textAlign: 'center',\n    letterSpacing: '13px',\n    fontSize: '40px',\n    color: LynetteBrown,\n    marginTop: '30px',\n    marginBottom: '25px',\n})\n\nconst Goal = styled('div', {\n    textAlign: 'center',\n\n    // Organizing title, description, & button\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n})\n\nconst GoalName = styled('h2', {\n    fontFamily: 'Shree Bold',\n    letterSpacing: '4px',\n    borderBottom: '1px solid ' + LynetteBrown,\n    fontSize: '18pt',\n})\n\nconst GoalDescription = styled('p', {\n    marginTop: '20px',\n    fontFamily: 'Shree Reg',\n    marginBottom: '25px',\n})\n\nconst GoalButtonText = styled('button', {\n    // Font Related\n    fontFamily: 'Shree Reg',\n    letterSpacing: '1px',\n\n    // Colors\n    border: '1px solid ' + LynetteBrown,\n    color: LynetteBrown,\n    backgroundColor: 'transparent',\n\n    // Centered Menu\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    // Size of box\n    height: '45px',\n    width: '150px',\n})\n\nconst GridLayout = styled('div', {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr 1fr',\n    gridColumnGap: '100px',\n    gridRowGap: '50px',\n\n    // Center Menu\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    // Ensuring size does not maximize and minimize too much\n    minWidth: '400px',\n    maxWidth: '1200px',\n\n    // Helps organize Services when website is getting minimized or on Mobile\n    '@media screen and (max-width: 1250px)': {\n        marginLeft: '50px',\n        marginRight: '50px',\n    },\n\n    '@media screen and (max-width: 900px)': {\n        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n        maxWidth: '700px',\n        minWidth: '200px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n\n    '@media screen and (max-width: 760px)': {\n        marginLeft: '30px',\n        marginRight: '30px',\n    },\n})\n\nexport default Goals"]},"metadata":{},"sourceType":"module"}