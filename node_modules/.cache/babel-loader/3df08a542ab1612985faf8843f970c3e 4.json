{"ast":null,"code":"var _jsxFileName = \"/Users/Gray/Desktop/ /lynette-skin-studio-website/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport Home from './Home/Home';\nimport { styled } from 'styletron-react';\n\nconst App = () => {\n  // Links in Nav Bar\n  const links = [{\n    name: 'Home',\n    path: ''\n  }, {\n    name: 'About',\n    path: ''\n  }, {\n    name: 'Services',\n    path: ''\n  }, {\n    name: 'Products',\n    path: ''\n  }, {\n    name: 'Contact',\n    path: ''\n  }]; // Automate Rendering Links\n\n  const renderLinks = links => {\n    var renderedLinks = [];\n    renderedLinks.push(React.createElement(List, {\n      key: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Link, {\n      href: '#' + links[0].path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, links[0].name.toUpperCase()))); // On Home Page, show every link except the \"Contact Us\"\n    // because we made a button to handle that link\n\n    for (let i = 1; i < links.length - 1; i++) renderedLinks.push(React.createElement(List, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Link, {\n      $style: {\n        color: 'white'\n      },\n      href: '#' + links[i].path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, links[i].name.toUpperCase())));\n\n    return renderedLinks;\n  };\n\n  const formattedHtmlLinks = renderLinks(links);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Home, {\n    renderLinks: formattedHtmlLinks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n}; // CSS        \n\n\nconst LynetteBrown = '#862e08';\nexport const List = styled('li', {\n  listStyleType: 'none'\n  /* Takes off Bullet Points from List */\n\n});\nexport const Link = styled('a', {\n  textDecoration: 'none',\n\n  /* Takes off Underline in Links */\n  color: LynetteBrown,\n  marginRight: '6px',\n  letterSpacing: '0.1em',\n  fontSize: '18px'\n});\nexport default App;","map":{"version":3,"sources":["/Users/Gray/Desktop/ /lynette-skin-studio-website/src/App.tsx"],"names":["React","Home","styled","App","links","name","path","renderLinks","renderedLinks","push","toUpperCase","i","length","color","formattedHtmlLinks","LynetteBrown","List","listStyleType","Link","textDecoration","marginRight","letterSpacing","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAkB,aAAlB;AAGA,SAASC,MAAT,QAAuB,iBAAvB;;AAOA,MAAMC,GAAa,GAAG,MAAM;AAC1B;AACA,QAAMC,KAAkB,GAAG,CACvB;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GADuB,EAEvB;AAAED,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GAFuB,EAGvB;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAHuB,EAIvB;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAJuB,EAKvB;AAAED,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,IAAI,EAAE;AAAzB,GALuB,CAA3B,CAF0B,CAU1B;;AACA,QAAMC,WAAW,GAAIH,KAAD,IAAwB;AACxC,QAAII,aAAa,GAAG,EAApB;AAEAA,IAAAA,aAAa,CAACC,IAAd,CACE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAG,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAG,MAAML,KAAK,CAAC,CAAD,CAAL,CAASE,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCF,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcK,WAAd,EAArC,CADJ,CADF,EAHwC,CASxC;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAAN,GAAe,CAAnC,EAAsCD,CAAC,EAAvC,EACIH,aAAa,CAACC,IAAd,CACI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAGE,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAkC,MAAA,IAAI,EAAG,MAAMT,KAAK,CAACO,CAAD,CAAL,CAASL,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiEF,KAAK,CAACO,CAAD,CAAL,CAASN,IAAT,CAAcK,WAAd,EAAjE,CADJ,CADJ;;AAOJ,WAAOF,aAAP;AACH,GApBD;;AAsBA,QAAMM,kBAAkB,GAAGP,WAAW,CAACH,KAAD,CAAtC;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAM,IAAA,WAAW,EAAGU,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAOD,CA1CD,C,CA4CA;;;AACA,MAAMC,YAAY,GAAG,SAArB;AAEA,OAAO,MAAMC,IAAI,GAAGd,MAAM,CAAC,IAAD,EAAO;AAC/Be,EAAAA,aAAa,EAAE;AAAS;;AADO,CAAP,CAAnB;AAIP,OAAO,MAAMC,IAAI,GAAGhB,MAAM,CAAC,GAAD,EAAM;AAC9BiB,EAAAA,cAAc,EAAE,MADc;;AACN;AACxBN,EAAAA,KAAK,EAAEE,YAFuB;AAG9BK,EAAAA,WAAW,EAAE,KAHiB;AAI9BC,EAAAA,aAAa,EAAE,OAJe;AAK9BC,EAAAA,QAAQ,EAAE;AALoB,CAAN,CAAnB;AAQP,eAAenB,GAAf","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Home  from './Home/Home'\nimport Product from './Product/Product'\nimport NavBarScrolling from './NavBarScrolling/NavBarScrolling'\nimport { styled } from 'styletron-react'\n\ntype LinkValue = {\n  name: string;\n  path: string;\n}\n\nconst App: React.FC = () => {\n  // Links in Nav Bar\n  const links: LinkValue[] = [\n      { name: 'Home', path: '' },\n      { name: 'About', path: '' },\n      { name: 'Services', path: '' },\n      { name: 'Products', path: '' },\n      { name: 'Contact', path: '' }\n  ]\n\n  // Automate Rendering Links\n  const renderLinks = (links: LinkValue[]) => {\n      var renderedLinks = []\n\n      renderedLinks.push(\n        <List key={ 0 }>\n            <Link href={ '#' + links[0].path }>{ links[0].name.toUpperCase() }</Link>\n        </List>\n      )\n\n      // On Home Page, show every link except the \"Contact Us\"\n      // because we made a button to handle that link\n      for (let i = 1; i < links.length - 1; i++)\n          renderedLinks.push(\n              <List key={ i }>\n                  <Link $style={{ color: 'white' }} href={ '#' + links[i].path }>{ links[i].name.toUpperCase() }</Link>\n                  {/* <Link href={ '#' + links[i].path }>{ links[i].name.toUpperCase() }</Link> */}\n              </List>\n          )\n      \n      return renderedLinks\n  }\n\n  const formattedHtmlLinks = renderLinks(links)\n\n  return (\n    <div className='App'>\n      {/* <NavBarScrolling links={ links } renderLinks={ formattedHtmlLinks } /> */}\n      <Home renderLinks={ formattedHtmlLinks } />\n      {/* <Product /> */}\n    </div>\n  )\n}\n\n// CSS        \nconst LynetteBrown = '#862e08'\n\nexport const List = styled('li', {\n  listStyleType: 'none',  /* Takes off Bullet Points from List */\n})\n\nexport const Link = styled('a', {\n  textDecoration: 'none', /* Takes off Underline in Links */\n  color: LynetteBrown,\n  marginRight: '6px',\n  letterSpacing: '0.1em',\n  fontSize: '18px'\n})\n\nexport default App"]},"metadata":{},"sourceType":"module"}