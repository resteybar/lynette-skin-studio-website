{"ast":null,"code":"var _jsxFileName = \"/Users/Gray/Desktop/ /lynette-skin-studio-website/src/Products/Products.tsx\";\nimport React from 'react';\nimport './Products.css';\nimport { styled } from 'styletron-react';\n\nconst Products = () => {\n  const products = [{\n    productName: 'Product Name',\n    productDescription: 'Product Description',\n    productPrice: 'Product Price'\n  }];\n\n  const renderProducts = () => {\n    var renderedMenu = [];\n\n    for (let i = 0; i < products.length; i++) {\n      const name = products[i].productName;\n      const description = products[i].productDescription;\n      const price = products[i].productPrice;\n      renderedMenu.push(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, i + 1), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, name), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, description), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, price)));\n    }\n\n    return renderedMenu;\n  };\n\n  return React.createElement(ProductsPage, {\n    id: \"Products\",\n    className: \"debug-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Products\"), React.createElement(GridLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, renderProducts()));\n};\n/*\n    TODO:\n        Eros\n            1. \"PRODUCTS\" title like \"SERVICES\" title\n            2. \"ATTENTION: ...\" message\n\n        Raymond\n        3. Organize layout of Products (Using Grid), 1 product at a time\n\n        Eros & Raymond\n            - Product Image\n            - Title\n            - Price\n            - onHover Background color\n            - onHover Description\n            - onHover Ingredients\n*/\n\n/*\n    Fonts:\n        - Products Title: Halant Light\n        - \"Attention...\": Shree Reg\n            - Color: Black\n        - Name of Product: Halant Medium\n        - Price: Shree Reg.\n        - OnHover Text: Shree Reg.\n*/\n// CSS\n\n\nconst ProductsTitle = styled('h1', {});\nconst ProductsPage = styled('div', {\n  backgroundColor: '#f4f2f5'\n});\nconst GridLayout = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr',\n  gridColumnGap: '90px',\n  // Center Menu\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  marginTop: '25px',\n  // Ensuring size does not maximize and minimize too much\n  minWidth: '400px',\n  maxWidth: '1400px',\n  // Helps organize Services when website is getting minimized or on Mobile\n  '@media screen and (max-width: 700px)': {\n    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))'\n  },\n  // Just in case someone has a REALLY small phone\n  '@media screen and (max-width: 500px)': {\n    minWidth: '0px'\n  },\n  // Ensures there is space around what wraps all the services as \n  // the browser minimizes\n  '@media screen and (max-width: 1500px)': {\n    marginLeft: '50px',\n    marginRight: '50px'\n  }\n});\nexport default Products;","map":{"version":3,"sources":["/Users/Gray/Desktop/ /lynette-skin-studio-website/src/Products/Products.tsx"],"names":["React","styled","Products","products","productName","productDescription","productPrice","renderProducts","renderedMenu","i","length","name","description","price","push","ProductsTitle","ProductsPage","backgroundColor","GridLayout","display","gridTemplateColumns","gridColumnGap","marginLeft","marginRight","marginTop","minWidth","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAQA,MAAMC,QAAkB,GAAG,MAAM;AAC7B,QAAMC,QAAyB,GAAG,CAC9B;AACIC,IAAAA,WAAW,EAAE,cADjB;AAEIC,IAAAA,kBAAkB,EAAE,qBAFxB;AAGIC,IAAAA,YAAY,EAAE;AAHlB,GAD8B,CAAlC;;AAQA,QAAMC,cAAc,GAAG,MAAqB;AACxC,QAAIC,YAA2B,GAAG,EAAlC;;AAEE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACrC,YAAME,IAAY,GAAGR,QAAQ,CAACM,CAAD,CAAR,CAAYL,WAAjC;AACA,YAAMQ,WAAmB,GAAGT,QAAQ,CAACM,CAAD,CAAR,CAAYJ,kBAAxC;AACA,YAAMQ,KAAa,GAAGV,QAAQ,CAACM,CAAD,CAAR,CAAYH,YAAlC;AAEAE,MAAAA,YAAY,CAACM,IAAb,CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAML,CAAC,GAAG,CAAV,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAME,IAAN,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMC,WAAN,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMC,KAAN,CAJJ,CADF;AAQH;;AAED,WAAOL,YAAP;AACL,GAnBD;;AAqBA,SACI,oBAAC,YAAD;AAAc,IAAA,EAAE,EAAC,UAAjB;AAA4B,IAAA,SAAS,EAAC,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMD,cAAc,EADpB,CAHJ,CADJ;AAUH,CAxCD;AA2CA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AAUA;;;AACA,MAAMQ,aAAa,GAAGd,MAAM,CAAC,IAAD,EAAO,EAAP,CAA5B;AAGA,MAAMe,YAAY,GAAGf,MAAM,CAAC,KAAD,EAAQ;AAC/BgB,EAAAA,eAAe,EAAE;AADc,CAAR,CAA3B;AAIA,MAAMC,UAAU,GAAGjB,MAAM,CAAC,KAAD,EAAQ;AAC7BkB,EAAAA,OAAO,EAAE,MADoB;AAE7BC,EAAAA,mBAAmB,EAAE,aAFQ;AAG7BC,EAAAA,aAAa,EAAE,MAHc;AAK7B;AACAC,EAAAA,UAAU,EAAE,MANiB;AAO7BC,EAAAA,WAAW,EAAE,MAPgB;AAQ7BC,EAAAA,SAAS,EAAE,MARkB;AAU7B;AACAC,EAAAA,QAAQ,EAAE,OAXmB;AAY7BC,EAAAA,QAAQ,EAAE,QAZmB;AAc7B;AACA,0CAAwC;AACpCN,IAAAA,mBAAmB,EAAE;AADe,GAfX;AAmB7B;AACA,0CAAwC;AACpCK,IAAAA,QAAQ,EAAE;AAD0B,GApBX;AAwB7B;AACA;AACA,2CAAyC;AACrCH,IAAAA,UAAU,EAAE,MADyB;AAErCC,IAAAA,WAAW,EAAE;AAFwB;AA1BZ,CAAR,CAAzB;AAgCA,eAAerB,QAAf","sourcesContent":["import React from 'react'\nimport './Products.css'\nimport { styled } from 'styletron-react'\n\ntype ProductValues = {\n    productName: string;\n    productDescription: string;\n    productPrice: string;\n}\n\nconst Products: React.FC = () => {\n    const products: ProductValues[] = [\n        {\n            productName: 'Product Name',\n            productDescription: 'Product Description',\n            productPrice: 'Product Price'\n        }\n    ]\n\n    const renderProducts = (): JSX.Element[] => {\n        var renderedMenu: JSX.Element[] = []\n\n          for (let i = 0; i < products.length; i++){\n              const name: string = products[i].productName\n              const description: string = products[i].productDescription\n              const price: string = products[i].productPrice\n\n              renderedMenu.push(\n                <div>\n                    <h1>{ i + 1 }</h1>\n                    <h1>{ name }</h1>\n                    <h1>{ description }</h1>\n                    <h1>{ price }</h1>\n                </div>\n              )\n          }\n\n          return renderedMenu\n    }\n\n    return (\n        <ProductsPage id=\"Products\" className='debug-border'>\n            <h1>Products</h1>\n            \n            <GridLayout>\n                { renderProducts() }\n            </GridLayout>\n\n        </ProductsPage>\n    )\n}\n\n\n/*\n    TODO:\n        Eros\n            1. \"PRODUCTS\" title like \"SERVICES\" title\n            2. \"ATTENTION: ...\" message\n\n        Raymond\n        3. Organize layout of Products (Using Grid), 1 product at a time\n\n        Eros & Raymond\n            - Product Image\n            - Title\n            - Price\n            - onHover Background color\n            - onHover Description\n            - onHover Ingredients\n*/\n\n/*\n    Fonts:\n        - Products Title: Halant Light\n        - \"Attention...\": Shree Reg\n            - Color: Black\n        - Name of Product: Halant Medium\n        - Price: Shree Reg.\n        - OnHover Text: Shree Reg.\n*/\n\n// CSS\nconst ProductsTitle = styled('h1', {\n    \n})\nconst ProductsPage = styled('div', {\n    backgroundColor: '#f4f2f5'\n})\n\nconst GridLayout = styled('div', {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr 1fr',\n    gridColumnGap: '90px',\n\n    // Center Menu\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: '25px',\n\n    // Ensuring size does not maximize and minimize too much\n    minWidth: '400px',\n    maxWidth: '1400px',\n\n    // Helps organize Services when website is getting minimized or on Mobile\n    '@media screen and (max-width: 700px)': {\n        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n    },\n\n    // Just in case someone has a REALLY small phone\n    '@media screen and (max-width: 500px)': {\n        minWidth: '0px',\n    },\n\n    // Ensures there is space around what wraps all the services as \n    // the browser minimizes\n    '@media screen and (max-width: 1500px)': {\n        marginLeft: '50px',\n        marginRight: '50px'\n    }\n})\n\nexport default Products"]},"metadata":{},"sourceType":"module"}